{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train(euro ~ ., data = training, trControl = cv, tuneGrid = expand.grid(alpha = 0.5, \n    lambda = 0), method = \"glmnet\", family = \"binomial\", metric = \"Accuracy\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train.formula(euro ~ ., data = training, trControl = cv, tuneGrid = expand.grid(alpha = 0.5, \n    lambda = 0), method = \"glmnet\", family = \"binomial\", metric = \"Accuracy\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train(x, y, weights = w, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train.default(x, y, weights = w, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, \n    method = models, ppOpts = preProcess, ctrl = trControl, lev = classLevels, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"foreach(iter = seq(along = resampleIndex), .combine = \"c\", .verbose = FALSE, \n    .export = export, .packages = \"caret\") %:% foreach(parm = 1L:nrow(info$loop), \n    .combine = \"c\", .verbose = FALSE, .export = export, .packages = \"caret\") %op% \n    { ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"e$fun(obj, substitute(ex), parent.frame(), e$data)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch({\n    repeat {\n        args <- nextElem(it)\n        if (obj$verbose) { ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(eval(xpr, envir = envir), error = function(e) e)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(xpr, envir = envir)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(xpr, envir = envir)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"try(createModel(x = subset_x(x, modelIndex), y = y[modelIndex], \n    wts = wts[modelIndex], method = method, tuneValue = info$loop[parm, \n        , drop = FALSE], obsLevels = lev, pp = ppp, classProbs = ctrl$classProbs, \n    sampling = ctrl$sampling, ...), silent = TRUE)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"createModel(x = subset_x(x, modelIndex), y = y[modelIndex], wts = wts[modelIndex], \n    method = method, tuneValue = info$loop[parm, , drop = FALSE], \n    obsLevels = lev, pp = ppp, classProbs = ctrl$classProbs, \n    sampling = ctrl$sampling, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"method$fit(x = x, y = y, wts = wts, param = tuneValue, lev = obsLevels, \n    last = last, classProbs = classProbs, ...)","line_number":0},{"character_number":21,"end_character_number":61,"end_line_number":63,"file":"glmnet.R","func":"do.call(glmnet::glmnet, modelArgs)","line_number":63},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"(function (x, y, family = c(\"gaussian\", \"binomial\", \"poisson\", \n    \"multinomial\", \"cox\", \"mgaussian\"), weights, offset = NULL, \n    alpha = 1, nlambda = 100, lambda.min.ratio = ifelse(nobs < \n        nvars, 0.01, 1e-04), lambda = NULL, standardize = TRUE,  ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs, \n    nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh, isd, \n    intr, vnames, maxit, kopt, family)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"getcoef(fit, nvars, nx, vnames)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"drop0(new(\"dgCMatrix\", Dim = dd, Dimnames = list(vnames, stepnames), \n    x = as.vector(ca[oja, ]), p = as.integer(ia - 1), i = as.integer(ja - \n        1)))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"is(x, \"CsparseMatrix\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"new(\"dgCMatrix\", Dim = dd, Dimnames = list(vnames, stepnames), \n    x = as.vector(ca[oja, ]), p = as.integer(ia - 1), i = as.integer(ja - \n        1))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"initialize(value, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"initialize(value, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"callNextMethod()","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":".nextMethod(.Object = .Object, ... = ...)","line_number":0}],"message":"StopIteration"}