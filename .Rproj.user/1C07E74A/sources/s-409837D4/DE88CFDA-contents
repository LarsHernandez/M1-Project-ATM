---
title: "Project M1"
author: "Andreas, Simon, Jess, Lars"
date: "14/9/2019"
output:
  html_document:
    code_folding: hide
    theme: flatly
    toc: yes
    toc_float:
      collapsed: no
---

# Analisys of SparNord ATM transactions in 2017 
Predictive moddeling of EURO vs. Non-EURO transactions

```{r}
library(tidyverse)
library(ggforce)
library(caret)
library(yardstick)
library(knitr)
library(ggthemes)
library(ggridges)
library(kableExtra)
library(VIM)
library(gridExtra)

library(ggmap)
library(osmdata)
library(sf)

load(file="generated_data/bATM.Rdata")
load(file="generated_data/fbATM.Rdata")

set.seed(20092019)
```




## Data

```{r fig.height=6, fig.width=10}
coord <- as.matrix(data.frame(min = c(8, 55), 
                              max = c(13, 58), 
                              row.names = c("x","y")))

s <- fATM %>% filter(atm_lat > coord[2,1] & atm_lat < coord[2,2] & 
                     atm_lon < coord[1,2] & atm_lon > coord[1,1]) %>% 
  group_by(atm_id) %>% 
  summarize(n   = n(),
            lat = first(atm_lat),
            lon = first(atm_lon),
            man = first(atm_manufacturer))


# First map ---------------------------------------------------------------
map9  <- get_stamenmap(coord, zoom = 9,  maptype = "toner-lite", force = TRUE)

p1 <- ggmap(map9) +
  geom_point(data = s, aes(lon,lat, size=n), alpha = 0.8) + 
  scale_size(range = c(0.5, 8)) +
  labs(title="SparNord ATM transactions in 2017", 
       subtitle = "size equals number of transactions")

p2 <- ggmap(map9) +
  stat_density_2d(data = s, aes(lon,lat, fill = stat(level)), geom = "polygon", alpha = .3) +
  scale_fill_viridis_c(option = "magma") +
  labs(title="SparNord ATM transactions in 2017", 
       subtitle = "Density of ATM placement")

grid.arrange(p1,p2, nrow=1)
```



```{r fig.height=3, fig.width=10}
s1 <- fATM %>% group_by(month)   %>% summarize(n=n()/1000) %>% ggplot(aes(month,n))   + geom_col()     + labs(title = "obs by month")+ theme(axis.text.x = element_text(angle = 90, vjust=-0.1))
s2 <- fATM %>% group_by(day)     %>% summarize(n=n()/1000) %>% ggplot(aes(day,n))     + geom_col()         + labs(title = "obs by day")
s3 <- fATM %>% group_by(weekday) %>% summarize(n=n()/1000) %>% ggplot(aes(weekday,n)) + geom_col() + labs(title = "obs by weekday")+ theme(axis.text.x = element_text(angle = 90, vjust=-0.1))
s4 <- fATM %>% group_by(hour)    %>% summarize(n=n()/1000) %>% ggplot(aes(hour,n))    + geom_col()       + labs(title = "obs by hour") + scale_x_continuous(breaks=c(0,2,4,6,8,10,12,14,16,18,20,22,24))

grid.arrange(s1,s2,s3,s4, nrow=1)
```


```{r fig.height=6, fig.width=10}
s5 <- bATM %>% filter(Euro == T) %>% group_by(month) %>% summarize(n=n()) %>% ggplot(aes(month,n)) + geom_col()

grid.arrange(s5)

#fATM %>% 
#  group_by(atm_id) %>% 
#  summarize(n=n(), area = first(weather_city_name)) %>% 
#  ggplot(aes(reorder(atm_id,n), n, fill=as.factor(area))) + 
#  geom_col()
```








## Feature generation

```{r}
fATM %>% 
  group_by(euro) %>% 
  summarize(MeanDistance = mean(airportdist))
```





```{r}
tab <- table(fATM$holliday, fATM$euro)
tab
paste0("Proportion of non-EURO transactions during vacations ", round(tab[2,1] / sum(tab[,1]),2),"%")
paste0("Proportion of EURO transactions during vacations ", round(tab[2,2] / sum(tab[,2]),2),"%")
summary(tab)


table(fbATM$Euro, fbATM$Id) %>% 
  prop.table(margin=2) %>% 
  as.data.frame %>% 
  filter(Var1==T) %>% 
  ggplot(aes(reorder(Var2, Freq), Freq)) + 
  geom_col() + 
  labs(x="ATM id", legend="Euro", title="Percentage of EURO transactions by each ATM machine", 
       subtitle="")



```


```{r}

```




## Unsupervised Models







## Supervised Models

```{r}
cv <- trainControl(method = "cv", number = 5)


ml <- fbATM


index    <- createDataPartition(ml$Euro, p = 0.25, list = FALSE)
training <- ml[index,] 
test     <- ml[-index,] 
```

```{r}
a <- Sys.time()
fit_log <- train(Euro ~ .,
                 data      = training,
                 trControl = cv, 
                 method    = "glm", 
                 family    = "binomial",
                 metric    = 'Accuracy')
Sys.time() - a

conf_log <- table(predict(fit_log,  test), test$Euro)
conf_log


conf_log <- table(predict(fit_log,  test), test$Id)
conf_log
```





```{r}

#conf_raf <- table(predict(fit_raf,  test), test$euro)
#conf_raf

conf_log <- table(predict(fit_log,  test), test$Euro)
conf_log
#
#conf_lok <- table(predict(fit_lok,  test), test$euro)
#conf_lok
#
#conf_net <- table(predict(fit_net,  test), test$euro)
#conf_net
#
#conf_svm <- table(predict(fit_svm,  test), test$euro)
#conf_svm

random   <- rbinom(n = length(test$Euro), size = 1, prob = mean(as.logical(training$Euro)))
conf_ran <- table(as.factor(if_else(random == 1, "TRUE", "FALSE")), test$Euro)
conf_ran
```







```{r}
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf))
#net <- rbind(spec(conf_net), precision(conf_net), accuracy(conf_net), recall(conf_net), npv(conf_net))
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf), recall(conf_raf), npv(conf_raf))
log <- rbind(spec(conf_log), precision(conf_log), accuracy(conf_log), recall(conf_log), npv(conf_log))
#lok <- rbind(spec(conf_lok), precision(conf_lok), accuracy(conf_lok), recall(conf_lok), npv(conf_lok))
ran <- rbind(spec(conf_ran), precision(conf_ran), accuracy(conf_ran), recall(conf_ran), npv(conf_ran))
#svm <- rbind(spec(conf_svm), precision(conf_svm), accuracy(conf_svm), recall(conf_svm), npv(conf_svm))

#raf$model <- "Random Forrest"
#net$model <- "Elastic Net Regression"
#raf$model <- "Random Forrest"
log$model <- "Logistic Regression - glm"
#lok$model <- "Logistic Regression - glmnet"
ran$model <- "Random Assignment"
#svm$model <- "Support Vector Machine Model"

#df <- rbind(log, lok, ran, net, raf, svm)

df <- rbind(ran, log)

ggplot(df, aes(.metric, .estimate, fill = reorder(model, desc(.estimate)))) + 
  geom_col(position="dodge", width = 0.6) + 
  scale_fill_tableau(palette = "Miller Stone", type = "regular") + 
  labs(title="Model performance on predicting Legendary status", 
       subtitle="Crossvalidated 1/5 split", fill="Predictive Model")
```































