sATM$Holliday <- Jul | Vinter | Paaske | Sommer | Efter
# Distance to other ATMs --------------------------------------------------
mat <- as.matrix(data.frame(lon = sATM$atm_lon,
lat = sATM$atm_lat))
Aal.luft <- c(9.842829962 , 57.088999644)
Bil.luft <- c(9.150999396 , 55.73749705)
Køb.luft <- c(12.650462   , 55.620750)
#Afstand er i meter og i luftlinje:
sATM$Aal.luft <- distHaversine(mat, Aal.luft, r=6378137)
sATM$Bil.luft <- distHaversine(mat, Bil.luft, r=6378137)
sATM$Køb.luft <- distHaversine(mat, Køb.luft, r=6378137)
#Nærmeste lufthavn i km:
sATM <- sATM %>%
mutate(Airportdist=round(pmin(sATM$Aal.luft,sATM$Bil.luft,sATM$Køb.luft)/1000,2))
#Divid clock
sATM$Morning <- ifelse((sATM$hour>=4 & sATM$hour<=9), TRUE, FALSE)
sATM$Midday  <- ifelse((sATM$hour>=10 & sATM$hour<=15), TRUE, FALSE)
sATM$Evening <- ifelse((sATM$hour>=16 & sATM$hour<=21), TRUE, FALSE)
sATM$Night   <- ifelse((sATM$hour>=22 | sATM$hour<=3), TRUE, FALSE)
#Divid the days
sATM$Weekday <- ifelse(sATM$weekday == "Monday" | sATM$weekday == "Tuesday" | sATM$weekday == "Wednesday" | sATM$weekday == "Thursday" | sATM$weekday == "Friday", TRUE, FALSE)
sATM$Weekend <- ifelse(sATM$weekday == "Saturday" | sATM$weekday == "Sunday", TRUE, FALSE)
#Valuta
sATM$Euro <- as.factor(ifelse(sATM$currency=="DKK", FALSE, TRUE))
#Payout
sATM$Payout <- ifelse((sATM$day <=4 | sATM$day >=27), TRUE, FALSE)
#Customer
sATM$Customer <- str_detect(sATM$card_type, pattern = "on-us")
#Cardtype
sATM$Card <- sapply(strsplit(sATM$card_type, split=' - on-us', fixed=TRUE), function(x) (x[1]))
sATM$Card <- as.factor(sATM$Card)
#Region
library(sf)
loc <- sATM %>% group_by(atm_id) %>%
summarize(x=first(atm_lon), y=first(atm_lat))
reg <- NA
for (i in 1:nrow(loc)) {
aa <- read_csv(paste0("http://dawa.aws.dk/kommuner/reverse?x=",loc$x[i] ,"&y=",loc$y[i]))
reg[i] <- as.character(aa[10,])
}
loc$Region <- reg
sATM <- merge(sATM,loc[,c(1,4)],by ="atm_id")
sATM$Region <- sapply(strsplit(sATM$Region, split='": "', fixed=TRUE), function(x) (x[2]))
sATM$Region <- as.factor(sATM$Region)
sATM$Id       <- as.factor(sATM$atm_id)
sATM$Holliday <- as.factor(sATM$Holliday)
sATM$Morning  <- as.factor(sATM$Morning)
sATM$Midday   <- as.factor(sATM$Midday)
sATM$Evening  <- as.factor(sATM$Evening)
sATM$Night    <- as.factor(sATM$Night)
sATM$Customer <- as.factor(sATM$Customer)
sATM$Weekday  <- as.factor(sATM$Weekday)
sATM$Weekend  <- as.factor(sATM$Weekend)
sATM$Payout   <- as.factor(sATM$Payout)
#Final dataset
fsATM <- sATM %>% select(Id, Holliday, Airportdist, Morning, Midday, Evening, Night,
Euro, Customer, Card, Weekday, Weekend, Payout, Region)
save(fsATM, file="generated_data/fsATM.Rdata")
View(fsATM)
sATM$Time <- ifelse((sATM$hour>=4 & sATM$hour<=9),   "Morning", NA)
sATM$Time <- ifelse((sATM$hour>=10 & sATM$hour<=15), "Midday", sATM$Time)
sATM$Time <- ifelse((sATM$hour>=16 & sATM$hour<=21), "Evening", sATM$Time)
sATM$Time <- ifelse((sATM$hour>=22 | sATM$hour<=3),  "Night", sATM$Time)
library(geosphere)
library(tidyverse)
# Features for the data ---------------------------------------------------
load(file="generated_data/sATM.Rdata")
#sATM <- bATM
# Holidays ----------------------------------------------------------------
# Denmark
# Ferie i Nordjylland (http://skoleferie-dk.dk/skoleferie-nordjylland/)
Jul    <- ifelse(((sATM$month=="December" & 20<=sATM$day) | (sATM$month=="January" & sATM$day<=4)), TRUE,FALSE)
Vinter <- ifelse((sATM$month=="February" & 11<=sATM$day & sATM$day<=26), TRUE,FALSE)
Paaske <- ifelse((sATM$month=="April" & 8 <= sATM$day & sATM$day<=17), TRUE,FALSE)
Sommer <- ifelse(((sATM$month=="June" & 23<=sATM$day) | (sATM$month=="July" & sATM$day>=1)| (sATM$month=="August" & sATM$day<=13)), TRUE,FALSE)
Efter  <- ifelse((sATM$month=="October" & 14<=sATM$day & sATM$day<=22), TRUE,FALSE)
sATM$Holliday <- Jul | Vinter | Paaske | Sommer | Efter
# Distance to other ATMs --------------------------------------------------
mat <- as.matrix(data.frame(lon = sATM$atm_lon,
lat = sATM$atm_lat))
Aal.luft <- c(9.842829962 , 57.088999644)
Bil.luft <- c(9.150999396 , 55.73749705)
Køb.luft <- c(12.650462   , 55.620750)
#Afstand er i meter og i luftlinje:
sATM$Aal.luft <- distHaversine(mat, Aal.luft, r=6378137)
sATM$Bil.luft <- distHaversine(mat, Bil.luft, r=6378137)
sATM$Køb.luft <- distHaversine(mat, Køb.luft, r=6378137)
#Nærmeste lufthavn i km:
sATM <- sATM %>%
mutate(Airportdist=round(pmin(sATM$Aal.luft,sATM$Bil.luft,sATM$Køb.luft)/1000,2))
#Divid clock
sATM$Time <- ifelse((sATM$hour>=4 & sATM$hour<=9),   "Morning", NA)
sATM$Time <- ifelse((sATM$hour>=10 & sATM$hour<=15), "Midday", sATM$Time)
sATM$Time <- ifelse((sATM$hour>=16 & sATM$hour<=21), "Evening", sATM$Time)
sATM$Time <- ifelse((sATM$hour>=22 | sATM$hour<=3),  "Night", sATM$Time)
#Divid the days
sATM$Weekend <- ifelse(sATM$weekday == "Saturday" | sATM$weekday == "Sunday", TRUE, FALSE)
#Valuta
sATM$Euro <- as.factor(ifelse(sATM$currency=="DKK", FALSE, TRUE))
#Payout
sATM$Payout <- ifelse((sATM$day <=4 | sATM$day >=27), TRUE, FALSE)
#Customer
sATM$Customer <- str_detect(sATM$card_type, pattern = "on-us")
#Cardtype
sATM$Card <- sapply(strsplit(sATM$card_type, split=' - on-us', fixed=TRUE), function(x) (x[1]))
sATM$Card <- as.factor(sATM$Card)
#Region
library(sf)
loc <- sATM %>% group_by(atm_id) %>%
summarize(x=first(atm_lon), y=first(atm_lat))
reg <- NA
for (i in 1:nrow(loc)) {
aa <- read_csv(paste0("http://dawa.aws.dk/kommuner/reverse?x=",loc$x[i] ,"&y=",loc$y[i]))
reg[i] <- as.character(aa[10,])
}
loc$Region <- reg
sATM <- merge(sATM,loc[,c(1,4)],by ="atm_id")
sATM$Region <- sapply(strsplit(sATM$Region, split='": "', fixed=TRUE), function(x) (x[2]))
sATM$Region <- as.factor(sATM$Region)
sATM$Id       <- as.factor(sATM$atm_id)
sATM$Time     <- as.factor(sATM$Time)
sATM$Holliday <- as.factor(sATM$Holliday)
sATM$Customer <- as.factor(sATM$Customer)
sATM$Weekend  <- as.factor(sATM$Weekend)
sATM$Payout   <- as.factor(sATM$Payout)
#Final dataset
fsATM <- sATM %>% select(Id, Holliday, Airportdist, Time,
Euro, Customer, Card, Weekend, Payout, Region)
save(fsATM, file="generated_data/fsATM.Rdata")
load(file="generated_data/bATM.Rdata")
sATM <- bATM
# Holidays ----------------------------------------------------------------
# Denmark
# Ferie i Nordjylland (http://skoleferie-dk.dk/skoleferie-nordjylland/)
Jul    <- ifelse(((sATM$month=="December" & 20<=sATM$day) | (sATM$month=="January" & sATM$day<=4)), TRUE,FALSE)
Vinter <- ifelse((sATM$month=="February" & 11<=sATM$day & sATM$day<=26), TRUE,FALSE)
Paaske <- ifelse((sATM$month=="April" & 8 <= sATM$day & sATM$day<=17), TRUE,FALSE)
Sommer <- ifelse(((sATM$month=="June" & 23<=sATM$day) | (sATM$month=="July" & sATM$day>=1)| (sATM$month=="August" & sATM$day<=13)), TRUE,FALSE)
Efter  <- ifelse((sATM$month=="October" & 14<=sATM$day & sATM$day<=22), TRUE,FALSE)
sATM$Holliday <- Jul | Vinter | Paaske | Sommer | Efter
# Distance to other ATMs --------------------------------------------------
mat <- as.matrix(data.frame(lon = sATM$atm_lon,
lat = sATM$atm_lat))
Aal.luft <- c(9.842829962 , 57.088999644)
Bil.luft <- c(9.150999396 , 55.73749705)
Køb.luft <- c(12.650462   , 55.620750)
#Afstand er i meter og i luftlinje:
sATM$Aal.luft <- distHaversine(mat, Aal.luft, r=6378137)
sATM$Bil.luft <- distHaversine(mat, Bil.luft, r=6378137)
sATM$Køb.luft <- distHaversine(mat, Køb.luft, r=6378137)
#Nærmeste lufthavn i km:
sATM <- sATM %>%
mutate(Airportdist=round(pmin(sATM$Aal.luft,sATM$Bil.luft,sATM$Køb.luft)/1000,2))
#Divid clock
sATM$Time <- ifelse((sATM$hour>=4 & sATM$hour<=9),   "Morning", NA)
sATM$Time <- ifelse((sATM$hour>=10 & sATM$hour<=15), "Midday", sATM$Time)
sATM$Time <- ifelse((sATM$hour>=16 & sATM$hour<=21), "Evening", sATM$Time)
sATM$Time <- ifelse((sATM$hour>=22 | sATM$hour<=3),  "Night", sATM$Time)
#Divid the days
sATM$Weekend <- ifelse(sATM$weekday == "Saturday" | sATM$weekday == "Sunday", TRUE, FALSE)
#Valuta
sATM$Euro <- as.factor(ifelse(sATM$currency=="DKK", FALSE, TRUE))
#Payout
sATM$Payout <- ifelse((sATM$day <=4 | sATM$day >=27), TRUE, FALSE)
#Customer
sATM$Customer <- str_detect(sATM$card_type, pattern = "on-us")
#Cardtype
sATM$Card <- sapply(strsplit(sATM$card_type, split=' - on-us', fixed=TRUE), function(x) (x[1]))
sATM$Card <- as.factor(sATM$Card)
#Region
library(sf)
loc <- sATM %>% group_by(atm_id) %>%
summarize(x=first(atm_lon), y=first(atm_lat))
reg <- NA
for (i in 1:nrow(loc)) {
aa <- read_csv(paste0("http://dawa.aws.dk/kommuner/reverse?x=",loc$x[i] ,"&y=",loc$y[i]))
reg[i] <- as.character(aa[10,])
}
loc$Region <- reg
sATM <- merge(sATM,loc[,c(1,4)],by ="atm_id")
sATM$Region <- sapply(strsplit(sATM$Region, split='": "', fixed=TRUE), function(x) (x[2]))
sATM$Region <- as.factor(sATM$Region)
sATM$Id       <- as.factor(sATM$atm_id)
sATM$Time     <- as.factor(sATM$Time)
sATM$Holliday <- as.factor(sATM$Holliday)
sATM$Customer <- as.factor(sATM$Customer)
sATM$Weekend  <- as.factor(sATM$Weekend)
sATM$Payout   <- as.factor(sATM$Payout)
#Final dataset
fbATM <- sATM %>% select(Id, Holliday, Airportdist, Time,
Euro, Customer, Card, Weekend, Payout, Region)
save(fbATM, file="generated_data/fbATM.Rdata")
View(fbATM)
load(file="generated_data/fsATM.Rdata")
load(file="generated_data/bATM.Rdata")
load(file="generated_data/fbATM.Rdata")
rm(fsATM)
View(bATM)
View(fbATM)
s5 <- fsATM %>% filter(Euro == T) %>% group_by(month) %>% summarize(n=n()) %>% ggplot(aes(month,n)) + geom_col()
s5 <- fbATM %>% filter(Euro == T) %>% group_by(month) %>% summarize(n=n()) %>% ggplot(aes(month,n)) + geom_col()
s5 <- bATM %>% filter(Euro == T) %>% group_by(month) %>% summarize(n=n()) %>% ggplot(aes(month,n)) + geom_col()
ml <- fbATM
cv <- trainControl(method = "cv", number = 5)
index    <- createDataPartition(ml$euro, p = 0.05, list = FALSE)
training <- ml[index,]
index    <- createDataPartition(ml$Euro, p = 0.05, list = FALSE)
training <- ml[index,]
test     <- ml[-index,]
fit_log <- train(Euro ~ .,
data      = training,
trControl = cv,
method    = "glm",
family    = "binomial",
metric    = 'Accuracy')
conf_log <- table(predict(fit_log,  test), test[,1])
conf_log <- table(predict(fit_log,  test), test[,1])
conf_log
conf_log <- table(predict(fit_log,  test), test$Euro)
conf_log <- table(predict(fit_log,  test), test$Euro)
conf_log
conf_log <- table(predict(fit_log,  test), test$Id)
conf_log <- table(predict(fit_log,  test), test$Id)
```
conf_log
#conf_raf <- table(predict(fit_raf,  test), test$euro)
#conf_raf
conf_log <- table(predict(fit_log,  test), test$euro)
conf_log <- table(predict(fit_log,  test), test$Euro)
conf_log <- table(predict(fit_log,  test), test$Euro)
conf_log
random   <- rbinom(n = length(test$Euro), size = 1, prob = mean(as.logical(training$Euro)))
conf_ran <- table(as.factor(if_else(random == 1, "TRUE", "FALSE")), test$Euro)
conf_ran
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf))
#net <- rbind(spec(conf_net), precision(conf_net), accuracy(conf_net), recall(conf_net), npv(conf_net))
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf), recall(conf_raf), npv(conf_raf))
log <- rbind(spec(conf_log), precision(conf_log), accuracy(conf_log), recall(conf_log), npv(conf_log))
#lok <- rbind(spec(conf_lok), precision(conf_lok), accuracy(conf_lok), recall(conf_lok), npv(conf_lok))
ran <- rbind(spec(conf_ran), precision(conf_ran), accuracy(conf_ran), recall(conf_ran), npv(conf_ran))
#svm <- rbind(spec(conf_svm), precision(conf_svm), accuracy(conf_svm), recall(conf_svm), npv(conf_svm))
#raf$model <- "Random Forrest"
#net$model <- "Elastic Net Regression"
#raf$model <- "Random Forrest"
log$model <- "Logistic Regression - glm"
#lok$model <- "Logistic Regression - glmnet"
ran$model <- "Random Assignment"
#svm$model <- "Support Vector Machine Model"
df <- rbind(log, lok, ran, net, raf, svm)
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf))
#net <- rbind(spec(conf_net), precision(conf_net), accuracy(conf_net), recall(conf_net), npv(conf_net))
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf), recall(conf_raf), npv(conf_raf))
log <- rbind(spec(conf_log), precision(conf_log), accuracy(conf_log), recall(conf_log), npv(conf_log))
#lok <- rbind(spec(conf_lok), precision(conf_lok), accuracy(conf_lok), recall(conf_lok), npv(conf_lok))
ran <- rbind(spec(conf_ran), precision(conf_ran), accuracy(conf_ran), recall(conf_ran), npv(conf_ran))
#svm <- rbind(spec(conf_svm), precision(conf_svm), accuracy(conf_svm), recall(conf_svm), npv(conf_svm))
#raf$model <- "Random Forrest"
#net$model <- "Elastic Net Regression"
#raf$model <- "Random Forrest"
log$model <- "Logistic Regression - glm"
#lok$model <- "Logistic Regression - glmnet"
ran$model <- "Random Assignment"
#svm$model <- "Support Vector Machine Model"
#df <- rbind(log, lok, ran, net, raf, svm)
df <- rbind(ran, log)
ggplot(df, aes(.metric, .estimate, fill = reorder(model, desc(.estimate)))) +
geom_col(position="dodge", width = 0.6) +
scale_fill_tableau(palette = "Miller Stone", type = "regular") +
labs(title="Model performance on predicting Legendary status",
subtitle="Crossvalidated 1/5 split", fill="Predictive Model")
library(tidyverse)
library(ggforce)
library(caret)
library(yardstick)
library(knitr)
library(ggthemes)
library(ggridges)
library(kableExtra)
library(VIM)
library(gridExtra)
library(ggmap)
library(osmdata)
library(sf)
load(file="generated_data/bATM.Rdata")
load(file="generated_data/fbATM.Rdata")
set.seed(20092019)
coord <- as.matrix(data.frame(min = c(8, 55),
max = c(13, 58),
row.names = c("x","y")))
s <- fATM %>% filter(atm_lat > coord[2,1] & atm_lat < coord[2,2] &
atm_lon < coord[1,2] & atm_lon > coord[1,1]) %>%
group_by(atm_id) %>%
summarize(n   = n(),
lat = first(atm_lat),
lon = first(atm_lon),
man = first(atm_manufacturer))
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf))
#net <- rbind(spec(conf_net), precision(conf_net), accuracy(conf_net), recall(conf_net), npv(conf_net))
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf), recall(conf_raf), npv(conf_raf))
log <- rbind(spec(conf_log), precision(conf_log), accuracy(conf_log), recall(conf_log), npv(conf_log))
#lok <- rbind(spec(conf_lok), precision(conf_lok), accuracy(conf_lok), recall(conf_lok), npv(conf_lok))
ran <- rbind(spec(conf_ran), precision(conf_ran), accuracy(conf_ran), recall(conf_ran), npv(conf_ran))
#svm <- rbind(spec(conf_svm), precision(conf_svm), accuracy(conf_svm), recall(conf_svm), npv(conf_svm))
#raf$model <- "Random Forrest"
#net$model <- "Elastic Net Regression"
#raf$model <- "Random Forrest"
log$model <- "Logistic Regression - glm"
#lok$model <- "Logistic Regression - glmnet"
ran$model <- "Random Assignment"
#svm$model <- "Support Vector Machine Model"
#df <- rbind(log, lok, ran, net, raf, svm)
df <- rbind(ran, log)
ggplot(df, aes(.metric, .estimate, fill = reorder(model, desc(.estimate)))) +
geom_col(position="dodge", width = 0.6) +
scale_fill_tableau(palette = "Miller Stone", type = "regular") +
labs(title="Model performance on predicting Legendary status",
subtitle="Crossvalidated 1/5 split", fill="Predictive Model")
cv <- trainControl(method = "cv", number = 5)
ml <- fbATM
index    <- createDataPartition(ml$Euro, p = 0.25, list = FALSE)
training <- ml[index,]
test     <- ml[-index,]
a <- Sys.time()
fit_log <- train(Euro ~ .,
data      = training,
trControl = cv,
method    = "glm",
family    = "binomial",
metric    = 'Accuracy')
Sys.time() - a
conf_log <- table(predict(fit_log,  test), test$Euro)
conf_log
conf_log <- table(predict(fit_log,  test), test$Id)
conf_log
#conf_raf <- table(predict(fit_raf,  test), test$euro)
#conf_raf
conf_log <- table(predict(fit_log,  test), test$Euro)
conf_log
#
#conf_lok <- table(predict(fit_lok,  test), test$euro)
#conf_lok
#
#conf_net <- table(predict(fit_net,  test), test$euro)
#conf_net
#
#conf_svm <- table(predict(fit_svm,  test), test$euro)
#conf_svm
random   <- rbinom(n = length(test$Euro), size = 1, prob = mean(as.logical(training$Euro)))
conf_ran <- table(as.factor(if_else(random == 1, "TRUE", "FALSE")), test$Euro)
conf_ran
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf))
#net <- rbind(spec(conf_net), precision(conf_net), accuracy(conf_net), recall(conf_net), npv(conf_net))
#raf <- rbind(spec(conf_raf), precision(conf_raf), accuracy(conf_raf), recall(conf_raf), npv(conf_raf))
log <- rbind(spec(conf_log), precision(conf_log), accuracy(conf_log), recall(conf_log), npv(conf_log))
#lok <- rbind(spec(conf_lok), precision(conf_lok), accuracy(conf_lok), recall(conf_lok), npv(conf_lok))
ran <- rbind(spec(conf_ran), precision(conf_ran), accuracy(conf_ran), recall(conf_ran), npv(conf_ran))
#svm <- rbind(spec(conf_svm), precision(conf_svm), accuracy(conf_svm), recall(conf_svm), npv(conf_svm))
#raf$model <- "Random Forrest"
#net$model <- "Elastic Net Regression"
#raf$model <- "Random Forrest"
log$model <- "Logistic Regression - glm"
#lok$model <- "Logistic Regression - glmnet"
ran$model <- "Random Assignment"
#svm$model <- "Support Vector Machine Model"
#df <- rbind(log, lok, ran, net, raf, svm)
df <- rbind(ran, log)
ggplot(df, aes(.metric, .estimate, fill = reorder(model, desc(.estimate)))) +
geom_col(position="dodge", width = 0.6) +
scale_fill_tableau(palette = "Miller Stone", type = "regular") +
labs(title="Model performance on predicting Legendary status",
subtitle="Crossvalidated 1/5 split", fill="Predictive Model")
table(fATM$euro, fATM$atm_id) %>%
prop.table(margin=2) %>%
as.data.frame %>%
filter(Var1==T) %>%
ggplot(aes(reorder(Var2, Freq), Freq)) +
geom_col() +
labs(x="ATM id", legend="Euro", title="Percentage of EURO transactions by each ATM machine",
subtitle="")
table(bATM$euro, fATM$atm_id) %>%
prop.table(margin=2) %>%
as.data.frame %>%
filter(Var1==T) %>%
ggplot(aes(reorder(Var2, Freq), Freq)) +
geom_col() +
labs(x="ATM id", legend="Euro", title="Percentage of EURO transactions by each ATM machine",
subtitle="")
table(bATM$euro, bATM$atm_id) %>%
prop.table(margin=2) %>%
as.data.frame %>%
filter(Var1==T) %>%
ggplot(aes(reorder(Var2, Freq), Freq)) +
geom_col() +
labs(x="ATM id", legend="Euro", title="Percentage of EURO transactions by each ATM machine",
subtitle="")
table(fbATM$Euro, fbATM$Id) %>%
prop.table(margin=2) %>%
as.data.frame %>%
filter(Var1==T) %>%
ggplot(aes(reorder(Var2, Freq), Freq)) +
geom_col() +
labs(x="ATM id", legend="Euro", title="Percentage of EURO transactions by each ATM machine",
subtitle="")
library(tidyverse)
library(ggforce)
install.packages("ggforce")
library(tidyverse)
library(ggforce)
library(caret)
library(yardstick)
install.packages("yardstick")
install.packages("yardstick")
install.packages("yardstick")
install.packages("yardstick")
install.packages("yardstick")
install.packages("knitr")
library(tidyverse)
library(ggforce)
library(caret)
library(yardstick)
install.packages("yardstick")
install.packages("yardstick")
install.packages("yardstick")
install.packages("pacman")
pacman::(tidyverse)
pacman::p_load(tidyverse, ggforce, caret, VIM, gridExtra,
ggmap, osmdata, sf, geosphere, yardstick,
knitr, ggthemes, ggridges, kableExtra)
library(tidyverse)
library(ggforce)
library(caret)
library(yardstick)
library(tidyverse)
library(ggforce)
library(caret)
#library(yardstick)
library(knitr)
library(ggthemes)
library(ggridges)
library(kableExtra)
library(VIM)
library(gridExtra)
library(ggmap)
library(osmdata)
library(sf)
load(file="generated_data/bATM.Rdata")
load(file="generated_data/fbATM.Rdata")
set.seed(20092019)
coord <- as.matrix(data.frame(min = c(8, 55),
max = c(13, 58),
row.names = c("x","y")))
s <- fATM %>% filter(atm_lat > coord[2,1] & atm_lat < coord[2,2] &
atm_lon < coord[1,2] & atm_lon > coord[1,1]) %>%
group_by(atm_id) %>%
summarize(n   = n(),
lat = first(atm_lat),
lon = first(atm_lon),
man = first(atm_manufacturer))
coord <- as.matrix(data.frame(min = c(8, 55),
max = c(13, 58),
row.names = c("x","y")))
s <- fbATM %>% filter(atm_lat > coord[2,1] & atm_lat < coord[2,2] &
atm_lon < coord[1,2] & atm_lon > coord[1,1]) %>%
group_by(atm_id) %>%
summarize(n   = n(),
lat = first(atm_lat),
lon = first(atm_lon),
man = first(atm_manufacturer))
load("//student.aau.dk/Users/aklitg15/Documents/GitHub/M1-Project-ATM/generated_data/fsATM.Rdata")
load("//student.aau.dk/Users/aklitg15/Documents/GitHub/M1-Project-ATM/generated_data/fbATM.Rdata")
View(fsATM)
View(fbATM)
View(bATM)
coord <- as.matrix(data.frame(min = c(8, 55),
max = c(13, 58),
row.names = c("x","y")))
s <- bATM %>% filter(atm_lat > coord[2,1] & atm_lat < coord[2,2] &
atm_lon < coord[1,2] & atm_lon > coord[1,1]) %>%
group_by(atm_id) %>%
summarize(n   = n(),
lat = first(atm_lat),
lon = first(atm_lon),
man = first(atm_manufacturer))
# First map ---------------------------------------------------------------
map9  <- get_stamenmap(coord, zoom = 9,  maptype = "toner-lite", force = TRUE)
p1 <- ggmap(map9) +
geom_point(data = s, aes(lon,lat, size=n), alpha = 0.8) +
scale_size(range = c(0.5, 8)) +
labs(title="SparNord ATM transactions in 2017",
subtitle = "size equals number of transactions")
p2 <- ggmap(map9) +
stat_density_2d(data = s, aes(lon,lat, fill = stat(level)), geom = "polygon", alpha = .3) +
scale_fill_viridis_c(option = "magma") +
labs(title="SparNord ATM transactions in 2017",
subtitle = "Density of ATM placement")
grid.arrange(p1,p2, nrow=1)
s1 <- fATM %>% group_by(month)   %>% summarize(n=n()/1000) %>% ggplot(aes(month,n))   + geom_col()     + labs(title = "obs by month")+ theme(axis.text.x = element_text(angle = 90, vjust=-0.1))
s1 <- bATM %>% group_by(month)   %>% summarize(n=n()/1000) %>% ggplot(aes(month,n))   + geom_col()     + labs(title = "obs by month")+ theme(axis.text.x = element_text(angle = 90, vjust=-0.1))
s2 <- bATM %>% group_by(day)     %>% summarize(n=n()/1000) %>% ggplot(aes(day,n))     + geom_col()         + labs(title = "obs by day")
s3 <- bATM %>% group_by(weekday) %>% summarize(n=n()/1000) %>% ggplot(aes(weekday,n)) + geom_col() + labs(title = "obs by weekday")+ theme(axis.text.x = element_text(angle = 90, vjust=-0.1))
s4 <- bATM %>% group_by(hour)    %>% summarize(n=n()/1000) %>% ggplot(aes(hour,n))    + geom_col()       + labs(title = "obs by hour") + scale_x_continuous(breaks=c(0,2,4,6,8,10,12,14,16,18,20,22,24))
grid.arrange(s1,s2,s3,s4, nrow=1)
s5 <- bATM %>% filter(Euro == T) %>% group_by(month) %>% summarize(n=n()) %>% ggplot(aes(month,n)) + geom_col()
s5 <- fbATM %>% filter(Euro == T) %>% group_by(month) %>% summarize(n=n()) %>% ggplot(aes(month,n)) + geom_col()
s5 <- bATM %>% filter(Euro == T) %>% group_by(month) %>% summarize(n=n()) %>% ggplot(aes(month,n)) + geom_col()
View(fbATM)
View(bATM)
bATM$Euro <- as.factor(ifelse(sATM$currency=="DKK", FALSE, TRUE))
bATM$Euro <- as.factor(ifelse(bATM$currency=="DKK", FALSE, TRUE))
s5 <- bATM %>% filter(Euro == T) %>% group_by(month) %>% summarize(n=n()) %>% ggplot(aes(month,n)) + geom_col()
grid.arrange(s5)
View(fbATM)
